pipeline {
   agent {
            label "agent"
   }
    properties([parameters([
		string(defaultValue: 'xxx@xxx.cn', description: '成功后邮件通知列表', name: 'Maillist_Success', trim: false),
		string(defaultValue: 'xxx@m.cn', description: '构建异常邮件通知列表', name: 'Maillist_Failed', trim: false),
		text(defaultValue: '''<hr/>
			(本邮件是程序自动下发的，请勿回复！)<br/><hr/>
			很遗憾的通知这次执行失败啦，一定有哪里出了问题，还请点开构建日志仔细检查，或者跟管理员联系 <br/><hr/>
			项目名称：$PROJECT_NAME<br/><hr/>
			触发原因：${CAUSE}<br/><hr/>

			构建流水线：<a href="http://0.0.0.0:8080/job/${JOB_NAME}">http://0.0.0.0:8080/job/${JOB_NAME}</a><br/><hr/>
			构建日志地址：<a href="${BUILD_URL}console">${BUILD_URL}console</a><br/><hr/>
			静测结果：<a href="http://0.0.0.0:9000/dashboard/index/${JOB_NAME}">http://0.0.0.0:9000/dashboard/index/${JOB_NAME}</a><br/><hr/>
			变更集:${JELLY_SCRIPT,template="html"}<br/><hr/>''',
			description: '构建异常邮件通知正文', name: 'EmailextBody_Failed'
		),
		string(defaultValue: 'xxxxx', description: '_api_key', name: 'Api_Key', trim: false),
		string(defaultValue: 'https://www.pgyer.com/apiv2/app/upload', description: 'Pgyer_URL', name: 'Pgyer_URL', trim: false),
		string(defaultValue: 'https://www.pgyer.com/app/qrcode/H9lA', description: 'Qrcode_URL', name: 'Qrcode_URL', trim: false),
		string(defaultValue: "\\test2\\build\\outputs\\apk\\test2-debug.apk", description: 'Output_Dir', name: 'Output_Dir', trim: false)
	])])

	echo 'check代码获取主版本号'
        checkout([$class: 'GitSCM', branches: [[name: 'master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CleanBeforeCheckout']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'one-ai-android', url: 'http://0.0.0.0:9087/xxxx_Android.git']]])

    def BUILD_VERSION = version()
    if (BUILD_VERSION) {
        echo "Building version ${BUILD_VERSION}"
        }
	def GIT_REVISION = GIT_Revision()
    if (GIT_REVISION) {
        echo "GIT_REVISION: ${GIT_REVISION}"
        }

    stage ('代码下载'){
        try {
            echo "打印项目版本号：${BUILD_VERSION}"
			echo '代码下载开始：'
            checkout([$class: 'GitSCM', branches: [[name: 'master']], doGenerateSubmoduleConfigurations: false, submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'xxx', url: 'http://0.0.0.0:9087/xxxx_Android.git']]])
		}
        catch (exc) {
            echo '代码下载失败了, 请检查配置！'
            emailext body: "${env.EmailextBody_Failed}",
			subject: "${JOB_NAME} - 版本${BUILD_VERSION}.${BUILD_NUMBER} - Failure!",
			to: "${params.Maillist_Failed}"
            bat 'exit 1'
        }
    }

    stage ('build'){
        try {
            bat 'gradle clean assembleDebug'
		}
        catch (exc) {
            echo '构建失败了, 请检查配置！'
            emailext body: "${env.EmailextBody_Failed}",
			subject: "${JOB_NAME} - 版本${BUILD_VERSION}.${BUILD_NUMBER} - Failure!",
			to: "${params.Maillist_Failed}"
            bat 'exit 1'
        }
    }

    stage('静态代码检查') {
		try {
			echo '静态代码检查开始：'
			withSonarQubeEnv('sonarqube6.5') {
				bat 'sonar-scanner ' +
				"-Dsonar.projectKey=${env.JOB_NAME} " +
				"-Dsonar.projectName=${env.JOB_NAME} " +
				'-Dsonar.projectVersion=1.0 ' +
				'-Dsonar.sources=app/src/ ' +
				'-Dsonar.java.binaries=app/build/intermediates/classes ' +
				'-Dsonar.java.libraries=app/libs/*.jar,E:/tools/android-sdk-windows/platforms/android-27/android.jar ' +
				'-Dsonar.skipDesign=true ' +
				'-Dsonar.sourceEncoding=UTF-8'
			}
		}
		catch (exc) {
            echo '静态代码检查失败了, 请检查配置！'
            emailext body: "${env.EmailextBody_Failed}",
			subject: "${JOB_NAME} - 版本${BUILD_VERSION}.${BUILD_NUMBER} - Failure!",
			to: "${params.Maillist_Failed}"
            bat 'exit 1'
        }
    }

    stage ('上传蒲公英'){
        try {
            //上传到蒲公英供邮件中的二维码下载
			bat """curl -F "file=@%WORKSPACE%%Output_Dir%" -F "buildUpdateDescription=CI构建版本号对应：${BUILD_VERSION}.%BUILD_NUMBER%" -F "_api_key=%Api_Key%" %Pgyer_URL%"""
		}
        catch (exc) {
            echo '上传蒲公英失败了, 请检查配置！'
            emailext body: "${env.EmailextBody_Failed}",
			subject: "${JOB_NAME} - 版本${BUILD_VERSION}.${BUILD_NUMBER} - Failure!",
			to: "${params.Maillist_Failed}"
            bat 'exit 1'
        }
    }

    stage ('上传Artifactory'){
        try {
			def SERVER_ID = 'Artifactory'
			def server = Artifactory.server SERVER_ID
			def uploadSpec =
			"""
			{
			"files": [
				{
					"pattern": "test2/build/outputs/apk/test2-debug.apk",
					"target": "Android-test-local/Android/${BUILD_VERSION}/${BUILD_NUMBER}/"
				}
			  ]
			}
			"""
			def buildInfo = Artifactory.newBuildInfo()
			buildInfo.env.capture = true
			buildInfo=server.upload(uploadSpec)
			server.publishBuildInfo(buildInfo)
		}
        catch (exc) {
            echo '上传Artifactory失败了, 请检查配置！'
            emailext body: "${env.EmailextBody_Failed}",
			subject: "${JOB_NAME} - 版本${BUILD_VERSION}.${BUILD_NUMBER} - Failure!",
			to: "${params.Maillist_Failed}"
            bat 'exit 1'
        }

	stage ('TAG'){
        bat """
            git tag -d release-${BUILD_VERSION}.${BUILD_NUMBER}
            git config --global user.email "qa-ci@xxxx.cn"
            git config --global user.name "qa-ci"
            git tag -a "release-${BUILD_VERSION}.${BUILD_NUMBER}" -m "CI Autobuild ${BUILD_VERSION}.${BUILD_NUMBER}" ${GIT_REVISION}
            git push origin "release-${BUILD_VERSION}.${BUILD_NUMBER}"
            """
    }
    }

	stage ('构建成功邮件通知'){
            emailext body: """<hr/>
			(本邮件是程序自动下发的，请勿回复！)<br/><hr/>

			构建成功啦，以下是本次构建信息： <br/><hr/>
			项目名称：\${PROJECT_NAME}<br/><hr/>
			版本号：${BUILD_VERSION}.${BUILD_NUMBER}<br/><hr/>

			GIT版本号：${GIT_REVISION}<br/><hr/>
			产物存放路径：<a href="http://0.0.0.0:8081/artifactory/list/Android-test-local/Android/${BUILD_VERSION}/${BUILD_NUMBER}/test2-debug.apk">点击下载本次构建产物</a><br/><hr/>

			手机扫描二维码下载：<br/><img src="${Qrcode_URL}"></img><br/><hr/>

			触发原因：\${CAUSE}<br/><hr/>

			构建流水线详情：<a href="http://0.0.0.0:8080/blue/organizations/jenkins/${JOB_NAME}/detail/${JOB_NAME}/${BUILD_NUMBER}/pipeline">http://0.0.0.0:8080/blue/organizations/jenkins/${JOB_NAME}/detail/${JOB_NAME}/${BUILD_NUMBER}/pipeline</a><br/><hr/>

			控制台日志：<a href="${BUILD_URL}console">${BUILD_URL}console</a><br/><hr/>

			静测结果：<a href="http://0.0.0.0:9000/dashboard/index/${JOB_NAME}">http://0.0.0.0:9000/dashboard/index/${JOB_NAME}</a><br/><hr/>

			变更集:\${JELLY_SCRIPT,template="html"}<br/><hr/>""" ,
			subject: "${JOB_NAME} - 版本${BUILD_VERSION}.${BUILD_NUMBER} - Successful!",
			to: "${params.Maillist_Success}"
    }
}
def version() {
    def matcher = readFile('VERSION.md') =~ 'VERSION_ID=(.+)'
    matcher ? matcher[0][1] : null
}
def GIT_Revision() {
    def matcher2 = readFile('.git/HEAD') =~ '(.+)'
    matcher2 ? matcher2[0][1] : null
}
